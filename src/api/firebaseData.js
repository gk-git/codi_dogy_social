import db from '../databaseConnection';const rootRef = db.ref("/");export const aboutUsHomeSectionRef = db.ref("/aboutUsHomeSection");export const aboutUs = db.ref("/aboutUs");export const contactUsRef = db.ref("/contactUs");let allData = {};const log = (thing) => {    console.log("[firebaseGetData]", thing)};const menu = {    menuItems: [        {            name: "Home",            url: "/",        },        {            name: "About Us",            url: "/about-us",        },        {            name: "Villagers",            url: "/villagers",        },        {            name: "Products",            url: "/products",        },        {            name: "Contact Us",            url: "/contact-us",        },        {            name: "Find A Store",            url: "/find-a-store",        }    ],    logo: {        src: '/b-west-latin-logo.png'        , alt: 'B-West Logo'    },};rootRef.on("value", function (snapshot) {    let allItems = snapshot.val();    allData = {...allItems, menu};}, function (errorObject) {    log("The read failed: " + errorObject.code);});export const firebaseInsertData = ({databaseRef, data, key = ''}) => {    let dbRef;    if (key !== '') {        dbRef = rootRef.child(databaseRef).child(key);    } else {        dbRef = rootRef.child(databaseRef);    }    return dbRef.set(data)};export const firebaseUpdateData = ({databaseRef, data, key = ''}) => {    let dbRef;    if (key !== '') {        dbRef = rootRef.child(databaseRef).child(key);    } else {        dbRef = rootRef.child(databaseRef);    }    return new Promise((resolve,reject)=>{        dbRef.update(data, function (error) {            if(error){                reject({                    success: false,                    error                })            }            resolve({                success: true,                data            })        });    });};export const firebaseDeleteData = ({databaseRef, key = ''}) => {    const dbRef = rootRef.child(databaseRef).child(key);    return dbRef.remove();};export const firebasePushData = ({databaseRef, data}) => {    const dbRef = rootRef.child(databaseRef);    const newPost = dbRef.push();    return newPost.set(data);};const listeners = [];export const once = (listener) => {    subscribe((data) => {        listener(data);        unsubscribe(listener);    })};export const subscribe = (listener) => {    listeners.push(listener);    return unsubscribe.bind(null, listener);};export const unsubscribe = (listener) => {    const index = listeners.indexOf(listener);    if (index >= 0) {        listeners.splice(index, 1);        return subscribe.bind(null, listener)    }};const trigger = () => {    listeners.forEach(listener => listener(allData))};let _hasLoaded = false;export const hasLoaded = () => {    return _hasLoaded};rootRef.on("value", trigger);once(() => {    _hasLoaded = true});